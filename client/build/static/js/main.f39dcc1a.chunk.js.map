{"version":3,"sources":["utils/API.js","pages/Signup.js","pages/Search.js","Components/map/testmap.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["userData","axios","post","Signup","useState","setShow","handleClose","formObject","setFormObject","handleInputChange","e","target","name","value","console","log","onClick","stopPropagation","Modal","show","size","onHide","Header","closeButton","ModalBody","Form","Row","Group","as","Col","controlId","Label","Control","onChange","type","placeholder","rows","Footer","Button","preventDefault","API","date","startDate","formDateStart","endDate","formDateEnd","location","address","formStreetNumber","street","formStreetName","city","formCity","state","formState","keyword","formKeyWords","description","formDescription","then","res","catch","err","variant","to","Searching","Container","InputGroup","className","FormControl","aria-label","aria-describedby","Prepend","style","background","id","mapStyles","width","height","MapContainer","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","props","marker","setState","activeMaker","onMapClicked","google","this","zoom","navigator","geolocation","visible","Component","GoogleApiWrapper","apiKey","Main","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","component","Search","require","App","exact","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f39dcc1a.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default {\n    //Save User\n    saveUser: function(userData) {\n        return axios.post(\"/api/sales\", userData)\n    }\n};","import React, {useState} from 'react';\nimport { Form, Button, ModalBody, Modal, Col } from 'react-bootstrap';\nimport API from '../utils/API';\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\"\n\n\n\nfunction Signup() {\n        //modal information to show and hide when submitting the form\n      const [show, setShow] = useState(false);\n\n       const handleClose = () => setShow(false);\n       const handleShow = () => setShow(true);\n    \n    //set components initial state\n    // const [signup, setSignup] = useState([])\n    const [formObject, setFormObject] = useState({})\n\n    //Handles updating component state when the user types into the input fields\n    function handleInputChange(e) {\n        \n        const { name, value } = e.target;\n        console.log(name, value);\n\n        formObject[name] = value;\n        setFormObject(formObject)\n        console.log(formObject);\n\n    };\n\n    //when the form is submitted, use the geoLocation function and then save the info to the DB\n    function handleFormSubmit(e) {\n        e.preventDefault();\n        console.log(formObject);\n        // if(formObject.formFirstName && formObject.formLastName && formObject.formBasicEmail) {\n            API.saveUser({\n                \n                date: [\n                    {startDate: formObject.formDateStart},\n                    {endDate: formObject.formDateEnd}\n                ],\n\n                location: [{\n                address: formObject.formStreetNumber},\n                {street: formObject.formStreetName},\n                {city: formObject.formCity},\n                {state: formObject.formState}\n                ],\n\n                keyword: [{\n                    keyword: formObject.formKeyWords}],\n\n                description: [{\n                    description: formObject.formDescription}]\n                \n\n            })\n            .then(res => {handleClose()}\n                )\n            .catch(err => console.log(err));\n        // }\n    };\n\n\n    \n    /*\n        GeoLocation Function\n    */\n//    function geoLocation(){\n//         console.log(\"hi\")\n//         console.log(formObject);\n//     //    take the address from sign up fields and convert for DB\n//         axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${formObject.formStreetNumber}+${formObject.formStreetName}+${formObject.formCity}+${formObject.formState}&key=AIzaSyAQV4OnQ1CIWg_QP0L_yL1lsftxK5K6CUs`)\n//             .then(function(res) {\n//                 console.log(res)\n//             })\n//             .catch(function (err) {\n//                 console.log(err)\n//             })\n//             .then(function(res) {\n\n//             }); \n//     }\n\n    \n    return (\n        <div onClick={e => e.stopPropagation()}>\n\n        <Modal show={true} size=\"lg\"onHide={handleClose}> \n        \n        <Modal.Header closeButton>Signup or Login</Modal.Header>\n            <ModalBody>\n        <Form>\n            <Form.Row>\n                <Form.Group as={Col} controlId='formFirstName'>\n                    <Form.Label>First Name</Form.Label>\n                    <Form.Control\n                    name='formFirstName'\n                    onChange={handleInputChange} type='text' placeholder='Bobby' />\n                </Form.Group>\n\n                <Form.Group as={Col} controlId='formLastName'>\n                    <Form.Label>Last Name</Form.Label>\n                    <Form.Control \n                    name='formLastName'\n                    onChange={handleInputChange} type='text' placeholder='Teenager' />\n                </Form.Group>\n           </Form.Row>\n\n           <Form.Row>\n                <Form.Group as={Col} controlId='formStreetNumber'>\n                    <Form.Label>House Number</Form.Label>\n                    <Form.Control \n                    name='formStreetNumber'\n                    onChange={handleInputChange} type='text' placeholder='123' />\n                </Form.Group>\n\n                <Form.Group as={Col} controlId='formStreetName'>\n                    <Form.Label>Street Name</Form.Label>\n                    <Form.Control \n                    name='formStreetName'\n                    onChange={handleInputChange} type='text' placeholder='Main St' />\n                </Form.Group>\n                </Form.Row>\n            <Form.Row>\n                <Form.Group as={Col} controlId='formCity'>\n                    <Form.Label>City</Form.Label>\n                    <Form.Control \n                    name='formCity'\n                    onChange={handleInputChange} type='text' placeholder='City' />\n                </Form.Group>\n            \n                <Form.Group as={Col} controlId='formState'>\n                    <Form.Label>State</Form.Label>\n                    <Form.Control \n                    name='formState'\n                    onChange={handleInputChange} type='text' placeholder='State' />\n                </Form.Group>\n\n                <Form.Group as={Col} controlId='formZip'>\n                    <Form.Label>Zip</Form.Label>\n                    <Form.Control \n                    name='formZip'\n                    onChange={handleInputChange} type='text' placeholder='01234' />\n                </Form.Group>\n         </Form.Row>\n         <Form.Row>\n                <Form.Group as={Col} controlId='formDateStart'>\n                    <Form.Label>Start Date</Form.Label>\n                    <Form.Control\n                    name='formDateStart'\n                    onChange={handleInputChange} type='text' placeholder='06/30/2020' />\n                </Form.Group>\n\n                <Form.Group as={Col} controlId='formDateEnd'>\n                    <Form.Label>End Date</Form.Label>\n                    <Form.Control\n                    name='formDateEnd'\n                    onChange={handleInputChange} type='text' placeholder='07/01/2020' />\n                </Form.Group>\n        </Form.Row>\n            <Form.Group controlId='formDescription'>\n                <Form.Label>Description</Form.Label>\n                <Form.Control \n                name='formDescription'\n                onChange={handleInputChange} as='textarea' rows='3' placeholder='Description' />\n            </Form.Group>\n            <Form.Group controlId='formKeyWords'>\n                <Form.Label>Keywords</Form.Label>\n                <Form.Control \n                name='formKeyWords'\n                onChange={handleInputChange} type='text' placeholder='Search Keywords' />\n            </Form.Group>\n\n            {/* <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Email address</Form.Label>\n                <Form.Control \n                name='formBasicEmail'\n                onChange={handleInputChange} type=\"email\" placeholder=\"Enter email\" />\n                <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.\n                </Form.Text>\n            </Form.Group> \n\n            <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control type=\"password\" placeholder=\"Password\" />\n            </Form.Group> */}\n            \n        </Form>\n        </ModalBody>\n        <Modal.Footer>\n        <Button \n            // disabled={!(formObject.formFirstName && formObject.formLastName && formObject.formBasicEmail)}\n                \n                onClick={handleFormSubmit}\n                variant=\"primary\" type=\"submit\">\n                Submit\n            </Button>\n            \n            <Link to=\"/\">Home</Link>\n            <Link to=\"/\">\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          </Link>\n        </Modal.Footer>\n        </Modal>\n        </div>\n\n    )\n};\n\nexport default Signup;","import React from 'react';\nimport { InputGroup, FormControl, Container, Col, Row, Button } from 'react-bootstrap';\n\n\nfunction Searching() {\n  return (\n    <div>\n      <Container>\n        <Row>\n          <Col>\n            <InputGroup size=\"lg\" className=\"search-box mt-5\">\n              <FormControl aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" placeholder=\"Address\" />\n              <InputGroup.Prepend>\n                <Button style={{ background: '#66CDAA' }} id=\"inputGroup-sizing-lg show-map\">Search test</Button>\n              </InputGroup.Prepend>\n            </InputGroup>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n};\n\nexport default Searching;","import React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n\nconst mapStyles = {\n  width: '50%',\n  height: '50%'\n};\n\n// function currentLocation(){\n//   if (navigator.geolocation) {\n//     navigator\n//   }\n// }\n\nexport class MapContainer extends Component {\n  state = {\n    showingInfoWindow: false,\n    activeMarker: {},\n    selectedPlace: {},\n  }\nonMarkerClick = (props, marker, e) =>\n  this.setState( {\n    selectedPlace: props,\n    activeMaker: marker,\n    showingInfoWindow: true\n  });\n\n  onMapClicked = (props) => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMaker: null\n      })\n    }\n  };\n\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        onClick={this.onMapClicked}\n        zoom={14}\n        style={mapStyles}>\n      \n\n      <Marker onClick={this.onMarkerClick}\n        name={navigator.geolocation} />\n\n      <InfoWindow\n        marker={this.state.activeMarker}\n        visible={this.state.showingInfoWindow}>\n        <div>\n          <h1>{this.state.selectedPlace.name}</h1>\n        </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyAQV4OnQ1CIWg_QP0L_yL1lsftxK5K6CUs'\n})(MapContainer);","import React from 'react';\nimport \"./main.css\"\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap';\n// import Results from './Results';\nimport Signup from './Signup';\nimport Search from \"./Search\"\nimport GoogleApiWrapper from \"../Components/map/testmap\"\n\nfunction Main() {\n  return (\n    <div>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"/landingpage\">Garage Sale Finder</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/signup\" component={Signup}>Create Post</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>   \n      <Search />\n      <GoogleApiWrapper />\n      <p>Test</p>\n    </div>\n  )\n};\n\nexport default Main;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Main from './pages/Main';\nimport Signup from './pages/Signup';\nimport Search from './pages/Search';\nvar bodyParser = require(\"body-parser\")\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Route exact path='/' component={Main} />\n        <Route exact path='/signup' component={Signup} />\n      </div>\n    </Router>\n\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();"],"sourceRoot":""}